Token: separator     Lexeme: $
     <Rat24S> -> $ <Opt Function Definitions> $ <Opt Declaration List> $ <Statement List> $
Token: keyword     Lexeme: function
     <Opt Function Definitions> -> <Function Definitions> | <Empty>
     <Function Definitions> -> <Function> <Function Definitions'>
     <Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Token: identifier     Lexeme: sum
Token: separator     Lexeme: (
Token: identifier     Lexeme: a
     <Opt Parameter List> -> <Parameter List> | <Empty>
     <Parameter List> -> <Parameter> <Parameter List'>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> <IDs'>
Token: keyword     Lexeme: integer
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
     <Qualifier> -> integer | boolean | real
Token: separator     Lexeme: ,
     <Parameter List'> -> , <Parameter List> | <Empty>
Token: identifier     Lexeme: b
     <Parameter List> -> <Parameter> <Parameter List'>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> <IDs'>
Token: keyword     Lexeme: integer
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
     <Qualifier> -> integer | boolean | real
Token: separator     Lexeme: ,
     <Parameter List'> -> , <Parameter List> | <Empty>
Token: identifier     Lexeme: c
     <Parameter List> -> <Parameter> <Parameter List'>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> <IDs'>
Token: keyword     Lexeme: integer
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
     <Qualifier> -> integer | boolean | real
Token: separator     Lexeme: )
     <Parameter List'> -> , <Parameter List> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: {
     <Opt Declaration List> -> <Declaration List> | <Empty>
     <Empty> -> ε
     <Body> -> { < Statement List> }
Token: keyword     Lexeme: return
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Return> -> return <Return'>
Token: identifier     Lexeme: a
     <Return'> -> ; | <Expression>;
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: operator     Lexeme: +
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
Token: identifier     Lexeme: b
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: operator     Lexeme: +
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
Token: identifier     Lexeme: c
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: }
     <Statement List'> -> <Statement List> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: function
     <Function Definitions'> -> <Function Definitions> | <Empty>
     <Function Definitions> -> <Function> <Function Definitions'>
     <Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Token: identifier     Lexeme: average
Token: separator     Lexeme: (
Token: identifier     Lexeme: apple
     <Opt Parameter List> -> <Parameter List> | <Empty>
     <Parameter List> -> <Parameter> <Parameter List'>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> <IDs'>
Token: keyword     Lexeme: integer
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
     <Qualifier> -> integer | boolean | real
Token: separator     Lexeme: ,
     <Parameter List'> -> , <Parameter List> | <Empty>
Token: identifier     Lexeme: banana
     <Parameter List> -> <Parameter> <Parameter List'>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> <IDs'>
Token: keyword     Lexeme: integer
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
     <Qualifier> -> integer | boolean | real
Token: separator     Lexeme: ,
     <Parameter List'> -> , <Parameter List> | <Empty>
Token: identifier     Lexeme: cactus
     <Parameter List> -> <Parameter> <Parameter List'>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> <IDs'>
Token: keyword     Lexeme: integer
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
     <Qualifier> -> integer | boolean | real
Token: separator     Lexeme: )
     <Parameter List'> -> , <Parameter List> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: integer
     <Opt Declaration List> -> <Declaration List> | <Empty>
     <Declaration List> -> <Declaration> ; <Declaration List'>
     <Declaration> -> <Qualifier > <IDs>
     <Qualifier> -> integer | boolean | real
Token: identifier     Lexeme: count
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ;
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: {
     <Declaration List'> -> <Declaration List> | <Empty>
     <Empty> -> ε
     <Body> -> { < Statement List> }
Token: identifier     Lexeme: count
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Assign> -> <Identifier> = <Expression> ;
Token: operator     Lexeme: =
Token: integer     Lexeme: 3
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: return
     <Statement List'> -> <Statement List> | <Empty>
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Return> -> return <Return'>
Token: identifier     Lexeme: sum
     <Return'> -> ; | <Expression>;
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: (
     <Primary'> -> ( <IDs> ) | <Empty>
Token: identifier     Lexeme: apple
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ,
     <IDs'> -> , <IDs> | <Empty>
Token: identifier     Lexeme: banana
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ,
     <IDs'> -> , <IDs> | <Empty>
Token: identifier     Lexeme: cactus
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: )
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
Token: operator     Lexeme: /
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
Token: identifier     Lexeme: count
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: }
     <Statement List'> -> <Statement List> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: function
     <Function Definitions'> -> <Function Definitions> | <Empty>
     <Function Definitions> -> <Function> <Function Definitions'>
     <Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Token: identifier     Lexeme: multiply
Token: separator     Lexeme: (
Token: identifier     Lexeme: a
     <Opt Parameter List> -> <Parameter List> | <Empty>
     <Parameter List> -> <Parameter> <Parameter List'>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> <IDs'>
Token: keyword     Lexeme: real
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
     <Qualifier> -> integer | boolean | real
Token: separator     Lexeme: ,
     <Parameter List'> -> , <Parameter List> | <Empty>
Token: identifier     Lexeme: b
     <Parameter List> -> <Parameter> <Parameter List'>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> <IDs'>
Token: keyword     Lexeme: real
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
     <Qualifier> -> integer | boolean | real
Token: separator     Lexeme: )
     <Parameter List'> -> , <Parameter List> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: {
     <Opt Declaration List> -> <Declaration List> | <Empty>
     <Empty> -> ε
     <Body> -> { < Statement List> }
Token: keyword     Lexeme: return
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Return> -> return <Return'>
Token: identifier     Lexeme: a
     <Return'> -> ; | <Expression>;
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: operator     Lexeme: *
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
Token: identifier     Lexeme: b
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: }
     <Statement List'> -> <Statement List> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: function
     <Function Definitions'> -> <Function Definitions> | <Empty>
     <Function Definitions> -> <Function> <Function Definitions'>
     <Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Token: identifier     Lexeme: exponential
Token: separator     Lexeme: (
Token: identifier     Lexeme: base
     <Opt Parameter List> -> <Parameter List> | <Empty>
     <Parameter List> -> <Parameter> <Parameter List'>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> <IDs'>
Token: keyword     Lexeme: real
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
     <Qualifier> -> integer | boolean | real
Token: separator     Lexeme: ,
     <Parameter List'> -> , <Parameter List> | <Empty>
Token: identifier     Lexeme: exponent
     <Parameter List> -> <Parameter> <Parameter List'>
     <Parameter> -> <IDs> <Qualifier>
     <IDs> -> <Identifier> <IDs'>
Token: keyword     Lexeme: real
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
     <Qualifier> -> integer | boolean | real
Token: separator     Lexeme: )
     <Parameter List'> -> , <Parameter List> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: real
     <Opt Declaration List> -> <Declaration List> | <Empty>
     <Declaration List> -> <Declaration> ; <Declaration List'>
     <Declaration> -> <Qualifier > <IDs>
     <Qualifier> -> integer | boolean | real
Token: identifier     Lexeme: product
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ;
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: {
     <Declaration List'> -> <Declaration List> | <Empty>
     <Empty> -> ε
     <Body> -> { < Statement List> }
Token: identifier     Lexeme: product
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Assign> -> <Identifier> = <Expression> ;
Token: operator     Lexeme: =
Token: integer     Lexeme: 1
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: if
     <Statement List'> -> <Statement List> | <Empty>
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <If> -> if ( <Condition> ) <Statement> <If'>
Token: separator     Lexeme: (
Token: identifier     Lexeme: exponent
     <Condition> -> <Expression> <Relop> <Expression>
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: operator     Lexeme: ==
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
     <Relop> -> == |!= | > | < | <= | =>
Token: integer     Lexeme: 0
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: )
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: return
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Return> -> return <Return'>
Token: integer     Lexeme: 1
     <Return'> -> ; | <Expression>;
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: endif
     <If'> -> endif | else <Statement> endif
Token: keyword     Lexeme: if
     <Statement List'> -> <Statement List> | <Empty>
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <If> -> if ( <Condition> ) <Statement> <If'>
Token: separator     Lexeme: (
Token: identifier     Lexeme: exponent
     <Condition> -> <Expression> <Relop> <Expression>
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: operator     Lexeme: =>
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
     <Relop> -> == |!= | > | < | <= | =>
Token: integer     Lexeme: 1
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: )
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: {
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Compound> -> { <Statement List> }
Token: keyword     Lexeme: while
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <While> -> while ( <Condition> ) <Statement> endwhile
Token: separator     Lexeme: (
Token: identifier     Lexeme: exponent
     <Condition> -> <Expression> <Relop> <Expression>
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: operator     Lexeme: =>
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
     <Relop> -> == |!= | > | < | <= | =>
Token: integer     Lexeme: 1
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: )
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: {
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Compound> -> { <Statement List> }
Token: identifier     Lexeme: product
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Assign> -> <Identifier> = <Expression> ;
Token: operator     Lexeme: =
Token: identifier     Lexeme: product
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: operator     Lexeme: *
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
Token: identifier     Lexeme: base
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: identifier     Lexeme: exponent
     <Statement List'> -> <Statement List> | <Empty>
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Assign> -> <Identifier> = <Expression> ;
Token: operator     Lexeme: =
Token: identifier     Lexeme: exponent
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: operator     Lexeme: -
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
Token: integer     Lexeme: 1
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: }
     <Statement List'> -> <Statement List> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: endwhile
Token: keyword     Lexeme: return
     <Statement List'> -> <Statement List> | <Empty>
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Return> -> return <Return'>
Token: identifier     Lexeme: product
     <Return'> -> ; | <Expression>;
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: }
     <Statement List'> -> <Statement List> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: endif
     <If'> -> endif | else <Statement> endif
Token: keyword     Lexeme: if
     <Statement List'> -> <Statement List> | <Empty>
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <If> -> if ( <Condition> ) <Statement> <If'>
Token: separator     Lexeme: (
Token: identifier     Lexeme: exponent
     <Condition> -> <Expression> <Relop> <Expression>
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: operator     Lexeme: <=
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
     <Relop> -> == |!= | > | < | <= | =>
Token: operator     Lexeme: -
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
Token: integer     Lexeme: 1
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: )
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: {
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Compound> -> { <Statement List> }
Token: keyword     Lexeme: while
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <While> -> while ( <Condition> ) <Statement> endwhile
Token: separator     Lexeme: (
Token: identifier     Lexeme: exponent
     <Condition> -> <Expression> <Relop> <Expression>
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: operator     Lexeme: =>
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
     <Relop> -> == |!= | > | < | <= | =>
Token: integer     Lexeme: 1
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: )
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: {
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Compound> -> { <Statement List> }
Token: identifier     Lexeme: product
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Assign> -> <Identifier> = <Expression> ;
Token: operator     Lexeme: =
Token: identifier     Lexeme: product
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: operator     Lexeme: /
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
Token: identifier     Lexeme: base
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: identifier     Lexeme: exponent
     <Statement List'> -> <Statement List> | <Empty>
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Assign> -> <Identifier> = <Expression> ;
Token: operator     Lexeme: =
Token: identifier     Lexeme: exponent
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: operator     Lexeme: +
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
Token: integer     Lexeme: 1
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: }
     <Statement List'> -> <Statement List> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: endwhile
Token: keyword     Lexeme: return
     <Statement List'> -> <Statement List> | <Empty>
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Return> -> return <Return'>
Token: identifier     Lexeme: product
     <Return'> -> ; | <Expression>;
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: }
     <Statement List'> -> <Statement List> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: endif
     <If'> -> endif | else <Statement> endif
Token: keyword     Lexeme: return
     <Statement List'> -> <Statement List> | <Empty>
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Return> -> return <Return'>
Token: integer     Lexeme: 0
     <Return'> -> ; | <Expression>;
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: ;
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: }
     <Statement List'> -> <Statement List> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: $
     <Function Definitions'> -> <Function Definitions> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: integer
     <Opt Declaration List> -> <Declaration List> | <Empty>
     <Declaration List> -> <Declaration> ; <Declaration List'>
     <Declaration> -> <Qualifier > <IDs>
     <Qualifier> -> integer | boolean | real
Token: identifier     Lexeme: num1
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ,
     <IDs'> -> , <IDs> | <Empty>
Token: identifier     Lexeme: num2
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ,
     <IDs'> -> , <IDs> | <Empty>
Token: identifier     Lexeme: num3
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ;
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: real
     <Declaration List'> -> <Declaration List> | <Empty>
     <Declaration List> -> <Declaration> ; <Declaration List'>
     <Declaration> -> <Qualifier > <IDs>
     <Qualifier> -> integer | boolean | real
Token: identifier     Lexeme: num_avg
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ;
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: $
     <Declaration List'> -> <Declaration List> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: scan
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Scan> -> scan ( <IDs> );
Token: separator     Lexeme: (
Token: identifier     Lexeme: num1
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ,
     <IDs'> -> , <IDs> | <Empty>
Token: identifier     Lexeme: num2
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ,
     <IDs'> -> , <IDs> | <Empty>
Token: identifier     Lexeme: num3
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: )
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: ;
Token: identifier     Lexeme: num_avg
     <Statement List'> -> <Statement List> | <Empty>
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Assign> -> <Identifier> = <Expression> ;
Token: operator     Lexeme: =
Token: identifier     Lexeme: average
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: (
     <Primary'> -> ( <IDs> ) | <Empty>
Token: identifier     Lexeme: num1
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ,
     <IDs'> -> , <IDs> | <Empty>
Token: identifier     Lexeme: num2
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ,
     <IDs'> -> , <IDs> | <Empty>
Token: identifier     Lexeme: num3
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: )
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: ;
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: keyword     Lexeme: print
     <Statement List'> -> <Statement List> | <Empty>
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Print> -> print ( <Expression>);
Token: separator     Lexeme: (
Token: identifier     Lexeme: num_avg
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: )
     <Primary'> -> ( <IDs> ) | <Empty>
     <Empty> -> ε
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: ;
Token: keyword     Lexeme: print
     <Statement List'> -> <Statement List> | <Empty>
     <Statement List> -> <Statement> <Statement List'>
     <Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
     <Print> -> print ( <Expression>);
Token: separator     Lexeme: (
Token: identifier     Lexeme: exponential
     <Expression> -> <Term> <Expression'>
     <Term> -> <Factor> <Term'>
     <Factor> -> - <Primary> | <Primary>
     <Primary> -> <Identifier><Primary'> | <Integer> | ( <Expression> ) | <Real> | true | false
Token: separator     Lexeme: (
     <Primary'> -> ( <IDs> ) | <Empty>
Token: identifier     Lexeme: num1
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: ,
     <IDs'> -> , <IDs> | <Empty>
Token: identifier     Lexeme: num2
     <IDs> -> <Identifier> <IDs'>
Token: separator     Lexeme: )
     <IDs'> -> , <IDs> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: )
     <Term'> -> * <Factor> <Term'> | / <Factor> <Term'> | <Empty>
     <Empty> -> ε
     <Expression'> -> + <Term> <Expression'> | - <Term> <Expression'> | <Empty>
     <Empty> -> ε
Token: separator     Lexeme: ;
Token: separator     Lexeme: $
     <Statement List'> -> <Statement List> | <Empty>
     <Empty> -> ε
